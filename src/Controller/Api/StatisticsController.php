<?php

declare(strict_types=1);

namespace Nkamuo\NotificationTrackerBundle\Controller\Api;

use Nkamuo\NotificationTrackerBundle\Repository\NotificationRepository;
use Nkamuo\NotificationTrackerBundle\Repository\MessageRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/api/notification-tracker', name: 'notification_tracker_api_')]
class StatisticsController extends AbstractController
{
    public function __construct(
        private NotificationRepository $notificationRepository,
        private MessageRepository $messageRepository
    ) {}

    #[Route('/statistics/dashboard', name: 'statistics_dashboard', methods: ['GET'])]
    public function dashboard(Request $request): JsonResponse
    {
        $period = $request->query->get('period', '30d'); // 24h, 7d, 30d, 90d, 1y
        $startDate = $this->parsePeriod($period);
        
        $statistics = [
            'period' => $period,
            'date_range' => [
                'start' => $startDate->format('Y-m-d H:i:s'),
                'end' => (new \DateTimeImmutable())->format('Y-m-d H:i:s')
            ],
            'notifications' => [
                'total' => $this->notificationRepository->countByDateRange($startDate),
                'by_type' => $this->notificationRepository->getCountByType($startDate),
                'by_importance' => $this->notificationRepository->getCountByImportance($startDate),
                'recent' => $this->notificationRepository->getRecentNotifications(5)
            ],
            'messages' => [
                'total' => $this->messageRepository->countByDateRange($startDate),
                'by_status' => $this->messageRepository->getCountByStatus($startDate),
                'by_type' => $this->messageRepository->getCountByType($startDate),
                'delivery_rate' => $this->messageRepository->getDeliveryRate($startDate),
                'failed_messages' => $this->messageRepository->getFailedMessages(10)
            ],
            'engagement' => [
                'open_rate' => $this->messageRepository->getOpenRate($startDate),
                'click_rate' => $this->messageRepository->getClickRate($startDate),
                'bounce_rate' => $this->messageRepository->getBounceRate($startDate),
                'top_performing' => $this->notificationRepository->getTopPerforming($startDate, 5)
            ],
            'trends' => [
                'daily_messages' => $this->messageRepository->getDailyMessageCounts($startDate),
                'hourly_distribution' => $this->messageRepository->getHourlyDistribution($startDate)
            ]
        ];

        return new JsonResponse($statistics);
    }

    #[Route('/statistics/notifications', name: 'statistics_notifications', methods: ['GET'])]
    public function notificationStatistics(Request $request): JsonResponse
    {
        $period = $request->query->get('period', '30d');
        $startDate = $this->parsePeriod($period);
        
        $statistics = [
            'period' => $period,
            'total_notifications' => $this->notificationRepository->countByDateRange($startDate),
            'by_type' => $this->notificationRepository->getCountByType($startDate),
            'by_importance' => $this->notificationRepository->getCountByImportance($startDate),
            'by_channel' => $this->notificationRepository->getCountByChannel($startDate),
            'auto_generated_vs_manual' => $this->notificationRepository->getAutoGeneratedVsManual($startDate),
            'average_messages_per_notification' => $this->notificationRepository->getAverageMessagesPerNotification($startDate),
            'top_performing' => $this->notificationRepository->getTopPerforming($startDate, 10)
        ];

        return new JsonResponse($statistics);
    }

    #[Route('/statistics/messages', name: 'statistics_messages', methods: ['GET'])]
    public function messageStatistics(Request $request): JsonResponse
    {
        $period = $request->query->get('period', '30d');
        $startDate = $this->parsePeriod($period);
        
        $statistics = [
            'period' => $period,
            'total_messages' => $this->messageRepository->countByDateRange($startDate),
            'by_status' => $this->messageRepository->getCountByStatus($startDate),
            'by_type' => $this->messageRepository->getCountByType($startDate),
            'by_transport' => $this->messageRepository->getCountByTransport($startDate),
            'delivery_statistics' => [
                'delivery_rate' => $this->messageRepository->getDeliveryRate($startDate),
                'failure_rate' => $this->messageRepository->getFailureRate($startDate),
                'retry_rate' => $this->messageRepository->getRetryRate($startDate)
            ],
            'engagement_statistics' => [
                'open_rate' => $this->messageRepository->getOpenRate($startDate),
                'click_rate' => $this->messageRepository->getClickRate($startDate),
                'bounce_rate' => $this->messageRepository->getBounceRate($startDate),
                'unsubscribe_rate' => $this->messageRepository->getUnsubscribeRate($startDate)
            ],
            'performance_metrics' => [
                'average_delivery_time' => $this->messageRepository->getAverageDeliveryTime($startDate),
                'messages_per_day' => $this->messageRepository->getAverageMessagesPerDay($startDate),
                'peak_sending_hour' => $this->messageRepository->getPeakSendingHour($startDate)
            ]
        ];

        return new JsonResponse($statistics);
    }

    #[Route('/statistics/engagement', name: 'statistics_engagement', methods: ['GET'])]
    public function engagementStatistics(Request $request): JsonResponse
    {
        $period = $request->query->get('period', '30d');
        $startDate = $this->parsePeriod($period);
        $messageType = $request->query->get('type'); // email, sms, slack, telegram, push
        
        $statistics = [
            'period' => $period,
            'message_type' => $messageType,
            'overall_engagement' => [
                'total_recipients' => $this->messageRepository->getTotalRecipients($startDate, $messageType),
                'unique_recipients' => $this->messageRepository->getUniqueRecipients($startDate, $messageType),
                'engagement_rate' => $this->messageRepository->getEngagementRate($startDate, $messageType)
            ],
            'open_metrics' => [
                'open_rate' => $this->messageRepository->getOpenRate($startDate, $messageType),
                'unique_opens' => $this->messageRepository->getUniqueOpens($startDate, $messageType),
                'total_opens' => $this->messageRepository->getTotalOpens($startDate, $messageType),
                'average_opens_per_recipient' => $this->messageRepository->getAverageOpensPerRecipient($startDate, $messageType)
            ],
            'click_metrics' => [
                'click_rate' => $this->messageRepository->getClickRate($startDate, $messageType),
                'click_through_rate' => $this->messageRepository->getClickThroughRate($startDate, $messageType),
                'unique_clicks' => $this->messageRepository->getUniqueClicks($startDate, $messageType),
                'total_clicks' => $this->messageRepository->getTotalClicks($startDate, $messageType)
            ],
            'time_based_analysis' => [
                'best_sending_time' => $this->messageRepository->getBestSendingTime($startDate, $messageType),
                'engagement_by_hour' => $this->messageRepository->getEngagementByHour($startDate, $messageType),
                'engagement_by_day' => $this->messageRepository->getEngagementByDay($startDate, $messageType)
            ]
        ];

        return new JsonResponse($statistics);
    }

    private function parsePeriod(string $period): \DateTimeImmutable
    {
        return match ($period) {
            '24h' => new \DateTimeImmutable('-24 hours'),
            '7d' => new \DateTimeImmutable('-7 days'),
            '30d' => new \DateTimeImmutable('-30 days'),
            '90d' => new \DateTimeImmutable('-90 days'),
            '1y' => new \DateTimeImmutable('-1 year'),
            default => new \DateTimeImmutable('-30 days')
        };
    }
}
